// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/haotianli89/driversvc/pb/driversvc.proto

/*
Package driversvc is a generated protocol buffer package.

It is generated from these files:
	github.com/haotianli89/driversvc/pb/driversvc.proto

It has these top-level messages:
	GetDriversRequest
	GetDriversResponse
	Driver
*/
package driversvc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetDriversRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetDriversRequest) Reset()                    { *m = GetDriversRequest{} }
func (m *GetDriversRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDriversRequest) ProtoMessage()               {}
func (*GetDriversRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetDriversRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetDriversResponse struct {
	Drivers []*Driver `protobuf:"bytes,1,rep,name=drivers" json:"drivers,omitempty"`
}

func (m *GetDriversResponse) Reset()                    { *m = GetDriversResponse{} }
func (m *GetDriversResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDriversResponse) ProtoMessage()               {}
func (*GetDriversResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetDriversResponse) GetDrivers() []*Driver {
	if m != nil {
		return m.Drivers
	}
	return nil
}

type Driver struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Driver) Reset()                    { *m = Driver{} }
func (m *Driver) String() string            { return proto.CompactTextString(m) }
func (*Driver) ProtoMessage()               {}
func (*Driver) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Driver) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Driver) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*GetDriversRequest)(nil), "GetDriversRequest")
	proto.RegisterType((*GetDriversResponse)(nil), "GetDriversResponse")
	proto.RegisterType((*Driver)(nil), "Driver")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Driversvc service

type DriversvcClient interface {
	GetDrivers(ctx context.Context, in *GetDriversRequest, opts ...client.CallOption) (*GetDriversResponse, error)
}

type driversvcClient struct {
	c           client.Client
	serviceName string
}

func NewDriversvcClient(serviceName string, c client.Client) DriversvcClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "driversvc"
	}
	return &driversvcClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *driversvcClient) GetDrivers(ctx context.Context, in *GetDriversRequest, opts ...client.CallOption) (*GetDriversResponse, error) {
	req := c.c.NewRequest(c.serviceName, "Driversvc.GetDrivers", in)
	out := new(GetDriversResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Driversvc service

type DriversvcHandler interface {
	GetDrivers(context.Context, *GetDriversRequest, *GetDriversResponse) error
}

func RegisterDriversvcHandler(s server.Server, hdlr DriversvcHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Driversvc{hdlr}, opts...))
}

type Driversvc struct {
	DriversvcHandler
}

func (h *Driversvc) GetDrivers(ctx context.Context, in *GetDriversRequest, out *GetDriversResponse) error {
	return h.DriversvcHandler.GetDrivers(ctx, in, out)
}

func init() {
	proto.RegisterFile("github.com/haotianli89/driversvc/pb/driversvc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x4e, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xcf, 0x48, 0xcc, 0x2f, 0xc9, 0x4c, 0xcc, 0xcb, 0xc9,
	0xb4, 0xb0, 0xd4, 0x4f, 0x29, 0xca, 0x2c, 0x4b, 0x2d, 0x2a, 0x2e, 0x4b, 0xd6, 0x2f, 0x48, 0x42,
	0x70, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x95, 0x94, 0xb9, 0x04, 0xdd, 0x53, 0x4b, 0x5c, 0x20,
	0xa2, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x99, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x4c, 0x99, 0x29, 0x4a, 0xe6, 0x5c, 0x42, 0xc8, 0x8a, 0x8a, 0x0b,
	0xf2, 0xf3, 0x8a, 0x53, 0x85, 0x14, 0xb9, 0xd8, 0xa1, 0xa6, 0x49, 0x30, 0x2a, 0x30, 0x6b, 0x70,
	0x1b, 0xb1, 0xeb, 0x41, 0x94, 0x04, 0xc1, 0xc4, 0x95, 0x74, 0xb8, 0xd8, 0x20, 0x42, 0xe8, 0x46,
	0x0a, 0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x81, 0x45, 0xc0, 0x6c, 0x23, 0x17,
	0x2e, 0x4e, 0x17, 0x98, 0xf3, 0x84, 0xcc, 0xb9, 0xb8, 0x10, 0x76, 0x0a, 0x09, 0xe9, 0x61, 0xb8,
	0x52, 0x4a, 0x58, 0x0f, 0xd3, 0x51, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x8f, 0x19, 0x03, 0x02, 0x00,
	0x00, 0xff, 0xff, 0x42, 0x34, 0xb3, 0x29, 0x0f, 0x01, 0x00, 0x00,
}
